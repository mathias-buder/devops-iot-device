<properties>

<!--Video Objects-->
<struct name="video_output_s" pointer="true" type="VIDEO_OBJECT_OUTPUT_LIST_STRUCT" expr="&amp;vi_output_object_list_s">
    <!--General video object signals-->
    <uint8 name="number_objects_u8"/>
    <uint8 name="number_veh_u8"/>
    <uint8 name="number_vru_u8"/>
    <uint8 name="id_cipv_u8"/>
    <uint8 name="id_mcvru_u8"/>
    <!--Additional general video object signals-->
    <float name="x_fb_mcvru_f32" expr="Transformation_XCoordinate(vi_obj_get_longitudinal_distance_by_index(vi_obj_get_index_by_type(VIDEO_MCVRU)), CS_CAMERA_ORIGIN, CS_FRONT_BUMPER)"/>
    <float name="x_fb_cipv_f32"  expr="Transformation_XCoordinate(vi_obj_get_longitudinal_distance_by_index(vi_obj_get_index_by_type(VIDEO_CIPV)),  CS_CAMERA_ORIGIN, CS_FRONT_BUMPER)"/>
    <enum name="fcv_mcvru_e" expr="vi_obj_get_flow_confirmation_by_index(vi_obj_get_index_by_type(VIDEO_MCVRU))">
        <range value="0">NOT_TESTED</range>
        <range value="1">FAILED</range>
        <range value="2">PASSED_MEDIUM_CONFIDENCE</range>
        <range value="3">PASSED_HIGH_CONFIDENCE</range>
    </enum>
    <enum name="fcv_cipv_e" expr="vi_obj_get_flow_confirmation_by_index(vi_obj_get_index_by_type(VIDEO_CIPV))">
        <range value="0">NOT_TESTED</range>
        <range value="1">FAILED</range>
        <range value="2">PASSED_MEDIUM_CONFIDENCE</range>
        <range value="3">PASSED_HIGH_CONFIDENCE</range>
    </enum>

    <!--Critical booleans-->
    <struct name="vru_aeb_flags_s">
        <boolean name="aeb_availability_b"/>
        <boolean name="aeb_alert_b"/>
        <boolean name="fcw_alert_b"/>
        <boolean name="aba_alert_b"/>
        <boolean name="prefill_alert_b"/>
    </struct>
    <struct name="veh_aeb_flags_s">
        <boolean name="aeb_availability_b"/>
        <boolean name="aeb_alert_b"/>
        <boolean name="fcw_alert_b"/>
        <boolean name="aba_alert_b"/>
        <boolean name="prefill_alert_b"/>
    </struct>

    <!--Object signals-->
    <struct name="object_s" array="12">
        <!--Input object-->
        <struct name="p_input_object_s" pointer="true">
            <uint8 name="id_u8"/>
            <enum name="class_e">
                <range value="0">UNKNOWN</range>
                <range value="1">TRUCK</range>
                <range value="2">CAR</range>
                <range value="3">MOTORBIKE</range>
                <range value="4">BICYCLE</range>
                <range value="5">PEDESTRIAN</range>
                <range value="6">TRUCK_OR_CAR</range>
            </enum>
            <boolean name="is_3dvd_object_b"/>
            <float name="x_cc_f32" unit="m"/>
            <float name="vx_rel_f32" unit="m/s"/>
            <!--Add absolute longitudinal velocity-->
            <float name="vx_abs_f32" expr="vi_output_object_list_s.object_s[i0].p_input_object_s->vx_rel_f32 + Vehi.speed_f32" unit="m/s"/>
            <!--End Add absolute longitudinal velocity-->
            <float name="v_og_f32"/>
            <float name="psi_rel_f32"/>
            <float name="angle_left_cc_f32"/>
            <float name="angle_right_cc_f32"/>
            <float name="angle_3d_cc_f32"/>
            <float name="angle_rate_left_cc_f32"/>
            <float name="angle_rate_right_cc_f32"/>
            <float name="angle_rate_3d_cc_f32"/>
            <!--Additional angles-->
            <float name="angle_left_deg_f32" expr="vi_output_object_list_s.object_s[i0].p_input_object_s->angle_left_cc_f32 * 57.295779513F" unit="deg"/>
            <float name="angle_right_deg_f32" expr="vi_output_object_list_s.object_s[i0].p_input_object_s->angle_right_cc_f32 * 57.295779513F" unit="deg"/>
            <float name="angle_mean_cc_deg_f32" expr="0.5F * (vi_output_object_list_s.object_s[i0].p_input_object_s->angle_left_cc_f32 + vi_output_object_list_s.object_s[i0].p_input_object_s->angle_right_cc_f32) * 57.295779513F" unit="deg"/>
            <float name="angle_rate_mean_cc_f32" expr="vi_obj_get_angle_rate_by_index(i0, VIDEO_ANGLE_MEAN)"/>
            <!--End Additional angles-->
            <float name="inverse_TTC_f32"/>
            <float name="width_f32"/>
            <float name="height_f32"/>
            <float name="length_f32"/>
            <float name="existence_probability_f32"/>
            <enum name="detection_status_e">
                <range value="0">NEW</range>
                <range value="1">MEAUSRED</range>
                <range value="2">PREDICTED</range>
            </enum>
            <enum name="flow_confirmation_e">
                <range value="0">NOT_TESTED</range>
                <range value="1">FAILED</range>
                <range value="2">PASSED_MEDIUM_CONFIDENCE</range>
                <range value="3">PASSED_HIGH_CONFIDENCE</range>
            </enum>
            <enum name="angle_left_measurement_status_e">
                <range value="0">INSIDE_FOV</range>
                <range value="1">OUTSIDE_FOV</range>
            </enum>
            <enum name="angle_right_measurement_status_e">
                <range value="0">INSIDE_FOV</range>
                <range value="1">OUTSIDE_FOV</range>
            </enum>
            <enum name="angle_3d_measurement_status_e">
                <range value="0">INSIDE_FOV</range>
                <range value="1">OUTSIDE_FOV</range>
            </enum>
            <enum name="cut_in_cut_out_e">
                <range value="0">UNKNOWN</range>
                <range value="1">IN_LEFT</range>
                <range value="2">IN_RIGHT</range>
                <range value="3">OUT_LEFT</range>
                <range value="4">OUT_RIGHT</range>
                <range value="5">NO_CUT_IN_OUT</range>
            </enum>
            <boolean name="is_asil_b_relevant_b"/>
            <boolean name="is_object_classified_b"/>
            <enum name="blinker_info_e">
                <range value="0">NA</range>
                <range value="1">OFF</range>
                <range value="2">LEFT</range>
                <range value="3">RIGHT</range>
                <range value="4">BOTH</range>
            </enum>
            <enum name="brake_light_e">
                <range value="0">NA</range>
                <range value="1">ON</range>
                <range value="2">OFF</range>
            </enum>
            <enum name="motion_status_e">
                <range value="0">NOT_DEFINED</range>
                <range value="1">STANDING</range>
                <range value="2">PARKED</range>
                <range value="3">STOPPED_MOVABLE</range>
                <range value="4">UNKNOWN_MOVABLE</range>
                <range value="5">MOVING_MOVABLE</range>
                <range value="6">STOPPED_ONCOMING</range>
                <range value="7">UNKNOWN_ONCOMING</range>
                <range value="8">MOVING_ONCOMING</range>
                <range value="9">CROSSING</range>
                <range value="10">CLOSE_CUT-IN</range>
                <range value="11">MOVING_UNKOWN</range>
                <range value="12">STOPPED_UNKNOWN</range>
                <range value="13">STOPPED_CROSSING</range>
            </enum>
            <enum name="lane_id_e">
                <range value="0">NA</range>
                <range value="1">EGO</range>
                <range value="2">LEFT</range>
                <range value="3">RIGHT</range>
                <range value="4">NEXT_LEFT</range>
                <range value="5">NEXT_RIGHT</range>
            </enum>
        </struct>
        <!--Preprocessed values-->
        <uint8 name="id_u8">
            <range value="0">N/A</range>
        </uint8>
        <float name="x_cc_f32" unit="m"/>
        <float name="x_rc_f32" unit="m" expr="Transformation_XCoordinate(vi_output_object_list_s.object_s[i0].x_cc_f32, CS_CAMERA_ORIGIN, CS_REFERENCE)"/>
        <float name="x_fb_f32" unit="m" expr="Transformation_XCoordinate(vi_output_object_list_s.object_s[i0].x_cc_f32, CS_CAMERA_ORIGIN, CS_FRONT_BUMPER)"/>
        <float name="y_cc_f32" unit="m"/>
        <float name="y_rc_f32" unit="m" expr="Transformation_YCoordinate(vi_output_object_list_s.object_s[i0].y_cc_f32, CS_CAMERA_ORIGIN, CS_REFERENCE)"/>
        <float name="tan_angle_left_cc_f32"  unit="rad" expr="NULL != vi_output_object_list_s.object_s[i0].p_input_object_s ? tanf(vi_output_object_list_s.object_s[i0].p_input_object_s->angle_left_cc_f32) : 0.0F"/>
        <float name="tan_angle_right_cc_f32" unit="rad" expr="NULL != vi_output_object_list_s.object_s[i0].p_input_object_s ? tanf(vi_output_object_list_s.object_s[i0].p_input_object_s->angle_right_cc_f32) : 0.0F"/>
        <float name="tan_angle_3d_cc_f32"    unit="rad" expr="NULL != vi_output_object_list_s.object_s[i0].p_input_object_s ? tanf(vi_output_object_list_s.object_s[i0].p_input_object_s->angle_3d_cc_f32) : 0.0F"/>
        <float name="tan_angle_std_f32"      unit="rad"/>
        <float name="width_f32"              unit="m"/>
        <boolean name="is_oncoming_b"/>
        <boolean name="is_comoving_b"/>
        <boolean name="is_fully_inside_fov_b"/>
        <boolean name="is_cipv_b"/>
        <boolean name="is_mcvru_b"/>
    </struct>
</struct>

</properties>